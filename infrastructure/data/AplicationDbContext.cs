public class AplicationDbContext : DbContext
{
    private readonly IComponentContext container;
    private readonly DatabaseConfig config;

    static AplicationDbContext()
    {
        Oracle.ManagedDataAccess.Client.OracleConfiguration.HAEvents = false;
        Oracle.ManagedDataAccess.Client.OracleConfiguration.LoadBalancing = false;
    }

    public AplicationDbContext(DbContextOptions options, DatabaseConfig config, IComponentContext container)
        : base(options)
    {
        this.config = config;
        this.container = container;
    }

    // Tabelas
    public DbSet<ProcessoOfertaNegociacao> ProcessoOfertaNegociacoes { get; set; }
    
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        optionsBuilder.EnableSensitiveDataLogging();
        base.OnConfiguring(optionsBuilder);
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.HasDefaultSchema(config.Schema);
        
        this.Database.ExecuteSqlCommand("ALTER SESSION SET NLS_COMP=LINGUISTIC");
        this.Database.ExecuteSqlCommand("ALTER SESSION SET NLS_SORT=BINARY_CI");
        modelBuilder.ApplyEntityTypeConfigurations(Assembly.GetExecutingAssembly(), config);
    }

    public override async Task<int> SaveChangesAsync(bool acceptAllChangesOnSuccess, CancellationToken cancellationToken = default(CancellationToken))
    {
        var codigoTransacao = Guid.NewGuid();

        var auditEntries = OnBeforeSaveChanges(codigoTransacao);
        var result = await base.SaveChangesAsync(acceptAllChangesOnSuccess, cancellationToken);
        await OnAfterSaveChanges(codigoTransacao, auditEntries);
        return result;
    }

    private List<AuditEntry> OnBeforeSaveChanges(Guid codigoTransacao)
    {
        ChangeTracker.DetectChanges();
        var auditEntries = new List<AuditEntry>();
        foreach (var entry in ChangeTracker.Entries())
        {
            if (entry.Entity is LogAcao || entry.Entity is ItemLogAcao || entry.State == EntityState.Detached || entry.State == EntityState.Unchanged)
            {
                continue;
            }

            var auditEntry = new AuditEntry(entry);
            if (entry.Entity is AuditableEntity)
            {
                auditEntry.AuditContext = ((AuditableEntity)entry.Entity).AuditContext;
                auditEntry.User = ((AuditableEntity)entry.Entity).User;
            }
            auditEntry.TableName = entry.Metadata.Relational().TableName;

            auditEntries.Add(auditEntry);

            foreach (var property in entry.Properties)
            {
                if (property.IsTemporary)
                {
                    // value will be generated by the database, get the value after saving
                    auditEntry.TemporaryProperties.Add(property);
                    continue;
                }

                string propertyName = auditEntry.GetDisplayName(property.Metadata.Name);
                var defaultProperty = auditEntry.GetDefaultProperty(property);

                if (property.Metadata.IsPrimaryKey())
                {
                    SetPrimaryKey(auditEntry, property, defaultProperty, propertyName);
                    continue;
                }

                switch (entry.State)
                {
                    case EntityState.Added:
                        auditEntry.NewValues[propertyName] = GetValue(property, property.CurrentValue, defaultProperty.CurrentValue);
                        break;

                    case EntityState.Deleted:
                        auditEntry.OldValues[propertyName] = GetValue(property, property.OriginalValue, defaultProperty.OriginalValue);
                        break;

                    case EntityState.Modified:
                        if (property.IsModified &&
                            ((property.OriginalValue != null && property.CurrentValue == null) ||
                            (property.OriginalValue == null && property.CurrentValue != null) ||
                            (property.OriginalValue != null && property.CurrentValue != null && 
                                !property.OriginalValue.Equals(property.CurrentValue))))
                        {
                            auditEntry.OldValues[propertyName] = GetValue(property, property.OriginalValue, defaultProperty.OriginalValue);
                            auditEntry.NewValues[propertyName] = GetValue(property, property.CurrentValue, defaultProperty.CurrentValue);
                        }
                        break;
                }
            }
        }

        // Save audit entities that have all the modifications
        foreach (var auditEntry in auditEntries.Where(_ => !_.HasTemporaryProperties))
        {
            if (auditEntry.AuditContext != null)
            {
                LogAcoes.Add(auditEntry.ToLogAcao(codigoTransacao));
            }
        }

        // keep a list of entries where the value of some properties are unknown at this step
        return auditEntries.Where(_ => _.AuditContext != null && _.HasTemporaryProperties).ToList();
    }

    private Task OnAfterSaveChanges(Guid codigoTransacao, List<AuditEntry> auditEntries)
    {
        if (auditEntries == null || auditEntries.Count == 0)
            return Task.CompletedTask;

        foreach (var auditEntry in auditEntries)
        {
            // Get the final value of the temporary properties
            foreach (var property in auditEntry.TemporaryProperties)
            {
                string propertyName = auditEntry.GetDisplayName(property.Metadata.Name);
                var defaultProperty = auditEntry.GetDefaultProperty(property);

                if (property.Metadata.IsPrimaryKey())
                {
                    SetPrimaryKey(auditEntry, property, defaultProperty, propertyName);
                }
                else
                {
                    auditEntry.NewValues[propertyName] = GetValue(property, property.CurrentValue, defaultProperty.CurrentValue);
                }
            }

            // Save the Audit entry
            LogAcoes.Add(auditEntry.ToLogAcao(codigoTransacao));
        }

        return SaveChangesAsync();
    }

    private void SetPrimaryKey(AuditEntry auditEntry, PropertyEntry property, PropertyEntry defaultProperty, string propertyName)
    {
        auditEntry.Id = (long)property.CurrentValue;
        if (auditEntry.AuditContext == null || string.IsNullOrEmpty(auditEntry.AuditContext.Identificador))
        {
            auditEntry.KeyValues[propertyName] = (defaultProperty.CurrentValue is long) ? ((long)property.CurrentValue).ToString() : Convert.ToString(defaultProperty.CurrentValue);
        }
        else
        {
            auditEntry.KeyValues[propertyName] = auditEntry.AuditContext.Identificador;
        }
    }

    private object GetValue(PropertyEntry property, object value, object defaultValue)
    {
        var type = property.Metadata.ClrType;

        if (property.Metadata.IsForeignKey() && value == null)
        {
            return value;
        }
        else if (property.Metadata.IsForeignKey() && value != null 
            && property.Metadata.PropertyInfo.GetCustomAttributes<DefaultValueAttribute>(false).FirstOrDefault() == null)
        {
            return value;
        }
        else if (property.Metadata.IsForeignKey() && value != null)
        {
            var defaultValueAttr = property.Metadata.PropertyInfo.GetCustomAttributes<DefaultValueAttribute>(false).FirstOrDefault();
            
            var propertyInfo = property.Metadata.DeclaringType.ClrType.GetProperty((string)defaultValueAttr.Value);
            var entityType = propertyInfo.PropertyType;

            Type repositoryType = null;
            if (entityType.IsAssignableTo<Entity>())
            {
                repositoryType = typeof(IRepository<>).MakeGenericType(entityType);                        
            }
            else
            {
                if (entityType.IsAssignableTo<StringEntity>())
                {
                    repositoryType = typeof(IStringRepository<>).MakeGenericType(entityType);
                }
            }

            return GetValue(repositoryType, value);
        }
        else if (type.IsEnum)
        {
            return EnumUtil.GetEnumDescription((Enum)defaultValue);
        }
        else
        {
            return defaultValue;
        }
    }

    private object GetValue(Type repositoryType, object value)
    {
        if (repositoryType == null)
        {
            return value;
        }

        var repository = container.Resolve(repositoryType);
        var methodGetById = repository.GetType().GetMethods().Single(p => p.Name.Equals("GetById") && p.GetParameters().Length == 2);

        if (value is string)
        {
            var entity = (StringEntity)methodGetById.Invoke(repository, new[] { value, false });
            return entity?.Value ?? value;
        }
        else
        {
            var entity = (Entity)methodGetById.Invoke(repository, new[] { value, false });
            return entity?.Value ?? value;
        }
    }
}